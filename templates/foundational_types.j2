{% extends "base.j2" %}
{% block title %}foundational types{% endblock %}

{% block content %}

{% filter convert_markdown %}
Some of Lean's types are not defined in any Lean source files (even the `prelude`) since they come from its foundational type theory. This page provides basic documentation for these types.

For a more in-depth explanation of Lean's type theory, refer to
[TPiL](https://leanprover.github.io/theorem_proving_in_lean/dependent_type_theory.html).

{%endfilter%}

{% filter convert_markdown %}
## `Sort u`

`Sort u` is the type of types in Lean, and `Sort u : Sort (u + 1)`.
{% endfilter %}

<details class="instances-for">
    <summary>Instances for <code>{{ 'Sort u' | htmlify_name }}</code></summary>
    <ul>
        {% for inst in instances_for['Sort'] %}
            <li>{{ inst | linkify }}</li>
        {% endfor %}
    </ul>
</details>

{% filter convert_markdown %}
## `Type u`

`Type u` is notation for `Sort (u + 1)`.
{% endfilter %}

<details class="instances-for">
    <summary>Instances for <code>{{ 'Type u' | htmlify_name }}</code></summary>
    <ul>
        {% for inst in instances_for['Type'] %}
            <li>{{ inst | linkify }}</li>
        {% endfor %}
    </ul>
</details>

{% filter convert_markdown %}
## `Prop`

`Prop` is notation for `Sort 0`.
{% endfilter %}

<details class="instances-for">
    <summary>Instances for <code>{{ 'Prop' | htmlify_name }}</code></summary>
    <ul>
        {% for inst in instances_for['Prop'] %}
            <li>{{ inst | linkify }}</li>
        {% endfor %}
    </ul>
</details>


{% filter convert_markdown %}
## Pi types, `Π a : α, β a`

The type of dependent functions is known as a pi type.
Non-dependent functions and implications are a special case.

Note that these can also be written with the alternative notations:

* `∀ a : α, β a`, conventionally used where `β a : Prop`.
* `α → γ`, possible only if `β a = γ` for all `a`.

Lean also permits ASCII-only spellings of the three variants:

* `Pi a : A, B a` for `Π a : α, β a`
* `forall a : A, B a` for `∀ a : α, β a`
* `A -> B`, for `α → β`

{% endfilter %}

<details class="instances-for">
    <summary>Instances for <code>{{ 'Π a : α, β a' | htmlify_name }}</code></summary>
    <ul>
        {% for inst in instances_for['pi'] %}
            <li>{{ inst | linkify }}</li>
        {% endfor %}
    </ul>
</details>

{% endblock %}

{% block internal_nav %}
<h3><a href="#top">{{ self.title() }}</a></h3>

{{ body.toc_html }}
{% endblock %}
